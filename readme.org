#+title: yamusca

* COMMENT generate markdown

#+begin_src emacs-lisp :exports none :results silent
  (defvar-local this-buffer-name (buffer-file-name))
  (add-hook
   'after-save-hook
   (lambda ()
     (when (string-equal this-buffer-name (buffer-file-name))
       (shell-command "pandoc --from org --to markdown -o README.md readme.org"))))
#+end_src

* yamusca

Yet another mustache parser/rendrer for scala.

** Features

- zero dependencies
- type safe and functional template data
- simple and easy to use

** Building

Using [[http://scala-sbt.org][sbt]]:

#+begin_src shell :exports both
sbt package
#+end_src


** Example

#+begin_src scala :exports both
import yamusca.imports._

val data = Context("name" -> Value.of("Eike"), "items" -> Value.fromSeq( List("one", "two").map(Value.of) ))
//data: yamusca.context.Context = yamusca.context$Context$$anon$2@4c41848e

val templ = mustache.parse("Hello {{name}}, see all {{#items}} - {{.}}, {{/items}}.")
//templ: yamusca.parser.ParseResult = Right(Template(Vector(Literal(Hello ), Variable(name,false), Literal(, see all ), Section(items,Vector(Literal( - ), Variable(.,false), Literal(, )),false), Literal(.))))

mustache.render(templ.right.get)(data)
//res0: String = Hello Eike, see all  - one,  - two, .
#+end_src
